(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{169:function(t,a,s){"use strict";s.r(a);var e=s(0),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"vue-react"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#vue-react"}},[t._v("#")]),t._v(" vue & react")]),t._v(" "),s("h2",{attrs:{id:"相似性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#相似性"}},[t._v("#")]),t._v(" 相似性")]),t._v(" "),s("h3",{attrs:{id:"组件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#组件"}},[t._v("#")]),t._v(" 组件")]),t._v(" "),s("p",[t._v("React 和 Vue 都是高度组件驱动的")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("组件可以帮我们将应用划分为多个合理的、可复用的代码块，这些代码块各自负责应用的不同部分。")])]),t._v(" "),s("ol",[s("li",[t._v("React 和 Vue 中的组件都有自己的状态：")])]),t._v(" "),s("ul",[s("li",[s("p",[t._v("React：用 state 保存状态，通过"),s("code",[t._v("setState()")]),t._v("方法进行存储")])]),t._v(" "),s("li",[s("p",[t._v("Vue：用 data 保存状态，通过 "),s("code",[t._v("更改数据对象")]),t._v("进行存储")])])]),t._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[t._v("React 和 Vue 都具有"),s("code",[t._v("单向数据流")]),t._v("，可以通过"),s("code",[t._v("props")]),t._v("将数据传递到组件内部，但是无法直接修改它")])]),t._v(" "),s("h3",{attrs:{id:"响应式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#响应式"}},[t._v("#")]),t._v(" 响应式")]),t._v(" "),s("p",[t._v("React 和 Vue 都有相似的响应式机制")]),t._v(" "),s("p",[t._v("如：如果有一个通过 prop 方式传入另一个组件的 state 井将它渲染在 DOM 中， 当这个 state 发生改变时， prop 也将发生改变，内部组件会随之得知 prop 已经发生改变 而相应地更新它在 DOM 中的值。")]),t._v(" "),s("h2",{attrs:{id:"差异性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#差异性"}},[t._v("#")]),t._v(" 差异性")]),t._v(" "),s("h3",{attrs:{id:"变更"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变更"}},[t._v("#")]),t._v(" 变更")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("React：直接变更 state 是不鼓励的行为")])]),t._v(" "),s("li",[s("p",[t._v("Vue：替换或修改 data 是 vue 唯一的方式")])])]),t._v(" "),s("p",[t._v("如：")]),t._v(" "),s("p",[t._v("React 中，更新一个组件的 state，可以使用 setState")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setState")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  user"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("user"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" newName\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("之后，新的 state 将会与当前的 state 对象进行合并")]),t._v(" "),s("p",[t._v("Vue 中，需要直接修改 data")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("user"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" newName"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("还可以通过 Redux 和 Vuex 进行比较来看出这一点：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("Redux：想要修改 一个已有的 store 时，会生成一个新的 store")])]),t._v(" "),s("li",[s("p",[t._v("Vuex：会直接修改已存在的 store")])])]),t._v(" "),s("h3",{attrs:{id:"css-modules"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#css-modules"}},[t._v("#")]),t._v(" css Modules")]),t._v(" "),s("p",[t._v("对与编写 css 的方式，React 没有提供内建功能，所以通常会使用 import 引入 css modules")]),t._v(" "),s("h3",{attrs:{id:"状态管理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#状态管理"}},[t._v("#")]),t._v(" 状态管理")]),t._v(" "),s("p",[t._v("Redux 和 vuex 都使用基本相同的方法提供一个全局的、可在整个应用程序中存储和修改数据的 store，但是：")]),t._v(" "),s("ul",[s("li",[t._v("Redux：")])]),t._v(" "),s("p",[t._v("要更新 state，需要使用 reducer 来生成一个新的 state。")]),t._v(" "),s("ul",[s("li",[t._v("vuex：")])]),t._v(" "),s("p",[t._v("可以直接访问 state，但是无法直接更改它，要更新 state 必须通过 mutation， 它是 store 中用于更改数据的特殊方法。")]),t._v(" "),s("p",[t._v("Mutation 只能是同步的，所以如果要异步修改某些内容(比如直接在 store 中将-些内容更新为 从某个 API 返回的数据)，可以使用 action。")])])}),[],!1,null,null,null);a.default=r.exports}}]);